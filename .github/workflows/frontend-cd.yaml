name: "Frontend Continuous Deployment"

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on pull request events targeting the main branch
  push:
    branches:
      - main

#start of cdefing the jobs and their steps
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm' #cache package 
          cache-dependency-path: starter/frontend/package-lock.json  # Will generate hash from the target file for primary key
    
      - name: install dependencies
        run: cd starter/frontend && npm ci

      - name: run test
        run: cd starter/frontend && npm test

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm' #cache package 
          cache-dependency-path: starter/frontend/package-lock.json  # Will generate hash from the target file for primary key
    
      - name: install dependencies
        run: cd starter/frontend && npm ci

      - name: run lint
        run: cd starter/frontend && npm run lint
  
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest

    environment:
      name: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm' #cache package 
          cache-dependency-path: starter/frontend/package-lock.json 
      
      - name: install dependencies
        run: cd starter/frontend && npm ci

      - name: run test
        run: cd starter/frontend && npm test      

      - name: setup docker build
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }} #get the registry name from the login into ECR step.
          REPOSITORY: ${{vars.FRONTEND_REPOSITORY}} #env var for repo name
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: ${{vars.REACT_APP_MOVIE_API_URL}}
        run: |
          cd starter/frontend
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


      - name: update Kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1

      - name: Set Image to cluster
        env:
          REPOSITORY: ${{vars.FRONTEND_REPOSITORY}} 
          IMAGE_TAG: ${{ github.sha }}       
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=146566234834.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY:$IMAGE_TAG

      - name: Apply K8s to cluster
        run: |
          cd starter/frontend/k8s                          
          kustomize build | kubectl apply -f -

    
