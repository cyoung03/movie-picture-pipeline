name: frontend-ci-workflow

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main

#start of cdefing the jobs and their steps
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm' #cache package 
          cache-dependency-path: starter/frontend/package-lock.json  # Will generate hash from the target file for primary key
    
      - name: install dependencies
        run: cd starter/frontend && npm ci

      - name: run test
        run: cd starter/frontend && npm test

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm' #cache package 
          cache-dependency-path: starter/frontend/package-lock.json  # Will generate hash from the target file for primary key
    
      - name: install dependencies
        run: cd starter/frontend && npm ci

      - name: run lint
        run: cd starter/frontend && npm run lint
  
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest

    environment:
      name: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm' #cache package 
          cache-dependency-path: starter/frontend/package-lock.json 
      
      - name: install dependencies
        run: cd starter/frontend && npm ci      

      - name: setup docker build
        uses: docker/setup-buildx-action@v3

      # - name: Echo environment variables
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
      #   run: |
      #     echo AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      #     echo REACT_APP_MOVIE_API_URL: $REACT_APP_MOVIE_API_URL

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1

      - name: Test aws connection
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
        run: |
          aws sts get-caller-identity

      # - name: Build, tag, and push docker image to Amazon ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: my-ecr-repo
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
